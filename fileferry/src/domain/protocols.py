from typing import Protocol, AsyncIterator
from domain.models.dataclasses import FileMeta


class FileRepository(Protocol):
    async def add(self, file: FileMeta) -> None: ...
    async def get(self, file_id: str) -> FileMeta: ...


class FileStorage(Protocol):
    async def store(
        self, file_id: str, stream: AsyncIterator[bytes], length: int, content_type: str
    ) -> None: ...
    async def retrieve(self, file_id: str) -> AsyncIterator[bytes]: ...


class UnitOfWork(Protocol):
    file_repo: FileRepository
    file_storage: FileStorage

    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_tb): ...
    async def save(
        meta: FileMeta, file_id: str, stream: AsyncIterator[bytes]
    ) -> FileMeta: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
